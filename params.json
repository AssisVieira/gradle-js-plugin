{"name":"Gradle JavaScript Plugin","body":"Wrangling your JS in a [Gradle](http://gradle.org) build is easy! Just add this to your *build.gradle* file:\r\n\r\n```groovy\r\n// Pull the plugin from a Maven Repo\r\nbuildscript {\r\n    repositories {\r\n        mavenCentral()\r\n    }\r\n    dependencies {\r\n        classpath 'com.eriwen:gradle-js-plugin:1.4.0'\r\n    }\r\n}\r\n// Invoke the plugin\r\napply plugin: 'js'\r\n\r\n// Declare your sources\r\njavascript.source {\r\n    dev {\r\n        js {\r\n            srcDir jsSrcDir\r\n            include \"*.js\"\r\n            exclude \"*.min.js\"\r\n        }\r\n    }\r\n    prod {\r\n        js {\r\n            srcDir jsSrcDir\r\n            include \"*.min.js\"\r\n        }\r\n    }\r\n}\r\n\r\n// Specify a collection of files to be combined, then minified and finally GZip compressed.\r\ntask combinejs(type: com.eriwen.gradle.js.tasks.CombineJsTask) {\r\n    if (env == 'prod') {\r\n        source = javascript.source.prod.js.files\r\n    } else {\r\n        source = javascript.source.dev.js.files\r\n    }\r\n    dest = file(\"${buildDir}/all.js\")\r\n}\r\n\r\ntask minifyjs(type: com.eriwen.gradle.js.tasks.MinifyJsTask) {\r\n    source = combinejs\r\n    dest = file(\"${buildDir}/all-min.js\")\r\n    closure {\r\n        warningLevel = 'QUIET'\r\n    }\r\n}\r\n\r\ntask gzipjs(type: com.eriwen.gradle.js.tasks.GzipJsTask) {\r\n    source = minifyjs\r\n    dest = file(\"${buildDir}/all-min.js\")\r\n}\r\n```\r\n\r\n**Need more than 1 set of files generated? We'll have to declare our tasks a bit differently:**\r\n\r\n```groovy\r\ntask jsDev(type: com.eriwen.gradle.js.tasks.CombineJsTask) {\r\n    source = [\"${projectDir}/js/file1.js\", \"${projectDir}/js/file2.js\"]\r\n    dest = file(\"${buildDir}/all-debug.js\")\r\n}\r\n\r\ntask jsProd(type: com.eriwen.gradle.js.tasks.CombineJsTask) {\r\n    source = [\"${projectDir}/js/file1.js\", \"${projectDir}/js/file2.js\"]\r\n    dest = file(\"${buildDir}/all.js\")\r\n}\r\n```\r\n\r\n**[JSHint](http://jshint.com) support**\r\n```groovy\r\ntask jshintjs(type: com.eriwen.gradle.js.tasks.JsHintTask) {\r\n    source = javascript.source.dev.js.files\r\n    dest = file(\"${buildDir}/jshint.out\")\r\n    jshint.options = [expr: \"true\", unused: \"true\"]\r\n}\r\n```\r\n\r\n**[JSDoc 3](https://github.com/jsdoc3/jsdoc) support**\r\n```groovy\r\ntask jsdocjs(type: com.eriwen.gradle.js.tasks.JsDocTask) {\r\n    source = [\"${projectDir}/js/file1.js\", \"${projectDir}/js/file2.js\"]\r\n    destinationDir = file(\"${buildDir}/jsdoc\")\r\n}\r\n```\r\n\r\n**[props2Js](https://github.com/nzakas/props2js) support**\r\n```groovy\r\ntask processProps(type: com.eriwen.gradle.js.tasks.Props2JsTask) {\r\n    source = file(\"${projectDir}/src/test/resources/test.properties\")\r\n    dest = file(\"${buildDir}/props.jsonp\")\r\n    props {\r\n        type = 'jsonp'\r\n        functionName = 'fn'\r\n    }\r\n}\r\n```\r\n\r\n**[require.js]() support**\r\n```groovy\r\ntask require(type: com.eriwen.gradle.js.tasks.RequireJsTask) {\r\n    source = javascript.source.dev.js.files\r\n    dest = \"${buildDir}/out.js\"\r\n    requirejs.buildprofile = new File(\"src/main/resources/requirejs-config.js\")\r\n}\r\n```\r\n\r\n# Built-in Tasks and Options\r\n### combineJs\r\n- source = Collection of file paths of files to merge\r\n- dest = File for combined output\r\n\r\n### minifyJs (Uses the [Google Closure Compiler](http://code.google.com/closure/compiler/))\r\n- source = File to minify\r\n- dest = File for minified output\r\n- *(Optional)* closure.compilationLevel = 'WHITESPACE_ONLY', 'SIMPLE_OPTIMIZATIONS' (default), or 'ADVANCED_OPTIMIZATIONS' (are you *hardcore*?)\r\n- *(Optional)* closure.warningLevel = 'QUIET', 'DEFAULT' (default), or 'VERBOSE'\r\n- *(Optional)* closure.compilerOptions = [CompilerOptions](http://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/javascript/jscomp/CompilerOptions.java?r=1918) object\r\n- *(Optional)* closure.externs = [FileCollection](http://gradle.org/docs/current/javadoc/org/gradle/api/file/FileCollection.html) object\r\n\r\n### gzipJs\r\n- source = File to compress\r\n- dest = File for compressed output\r\n\r\n### jshint\r\n- source = Files to assess with JSHint\r\n- dest = File for JSHint output\r\n- *(Optional)* ignoreExitCode = Fail build if `false` and jshint finds problems. Default is `true`.\r\n- *(Optional)* outputToStdOut = `true` will output to STDOUT instead of file. Default is `false`.\r\n- *(Optional)* jshint.options = Map of options (e.g. `[expr: \"true\", unused: \"true\"]`)\r\n\r\n\r\n### jsdoc\r\n- source = Files to generate documentation for\r\n- destinationDir = Directory path to put JSDoc output\r\n- *(Optional)* options.options = []\r\n\r\n```\r\nJSDoc 3 options:\r\n-t or --template <value> The name of the template to use. Default: the \"default\" template\r\n-c or --configure <value> The path to the configuration file. Default: jsdoc __dirname + /conf.json\r\n-e or --encoding <value> Assume this encoding when reading all source files. Default: utf-8\r\n-T or --test Run all tests and quit.\r\n-d or --destination <value> The path to the output folder. Use \"console\" to dump data to the console. Default: console\r\n-p or --private Display symbols marked with the @private tag. Default: false.\r\n-r or --recurse Recurse into subdirectories when scanning for source code files.\r\n-h or --help Print this message and quit.\r\n-X or --explain Dump all found doclet internals to console and quit.\r\n-q or --query <value> Provide a querystring to define custom variable names/values to add to the options hash.\r\n-u or --tutorials <value> Directory in which JSDoc should search for tutorials.\r\n```\r\n\r\n### props2js\r\n- source = Properties file to process\r\n- dest = Destination file for output\r\n- props.type = One of: 'js', 'json', or 'jsonp'\r\n- *(Optional)* props.functionName = Function name to wrap JSONP\r\n\r\n### requireJs\r\n- source = Source JS files\r\n- dest = Output JS file\r\n- *(Must declare this or `requirejs.options`)* requirejs.buildprofile = File reference for config [example](https://github.com/eriwen/gradle-js-plugin/blob/master/src/test/resources/requirejs/build.js)\r\n- requirejs.options = Map of options [require.js docs](http://requirejs.org/docs/optimization.html#options)\r\n- *(Optional)* ignoreExitCode = Fail build if `false` and require.js did not run successfully. Default is `false`.\r\n\r\nWhat, you want more? [Tell me!](https://github.com/eriwen/gradle-js-plugin/issues)\r\n\r\n## Contributors\r\nThis project is made possible due to the efforts of these fine people:\r\n\r\n* [Eric Wendelin](http://eriwen.com) - Original author and maintainer\r\n* [Luke Daley](https://github.com/alkemist) - Advice and improved project structure and testing\r\n* [Josh Newman](https://github.com/jnewman) - AMD and CommonJS work\r\n* Martin Ziel - Allowing minifyJs task to accept multiple files as input\r\n* [Joe Fitzgerald](https://github.com/joefitzgerald) - JSHint and RequireJS features\r\n\r\n# See Also #\r\nThe [Gradle CSS Plugin](https://github.com/eriwen/gradle-css-plugin)!\r\n\r\n_Brought to you by [@eriwen](https://twitter.com/eriwen)_","google":"UA-34997412-4","tagline":"Gradle plugin for working with JS","note":"Don't delete this file! It's used internally to help with page regeneration."}