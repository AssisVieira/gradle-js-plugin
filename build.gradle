apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'idea'

defaultTasks 'clean', 'build'

version = '0.4.1'
group = 'com.eriwen'
artifact = 'gradle-js-plugin'

configurations { 
	deployment
	published.extendsFrom archives, signatures
}

repositories {
	mavenCentral()
}

dependencies {
	groovy 'org.codehaus.groovy:groovy:1.8.4'
	compile gradleApi()
	compile 'com.google.javascript:closure-compiler:r1592'
	runtime 'org.codehaus.groovy:groovy:1.8.4'
	deployment 'org.apache.maven.wagon:wagon-webdav-jackrabbit:2.2'
    testCompile 'junit:junit:4.8.2'
}

idea.module {
	gradleCacheVariable = 'GRADLE_CACHE'
	downloadJavadoc = true
	outputDir = "${rootProject.projectDir}/intellij/out" as File
	testOutputDir = "${rootProject.projectDir}/intellij/testOut" as File
}

idea.project.ipr.withXml { provider ->
	def node = provider.asNode()
	// Use git
	def vcsConfig = node.component.find { it.'@name' == 'VcsDirectoryMappings' }
	vcsConfig.mapping[0].'@vcs' = 'Git'

	// Set gradle home
	def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
	gradleSettings.appendNode('option', [name: 'SDK_HOME', value: gradle.gradleHomeDir.absolutePath])
}

jar {
	baseName = artifact
}

task sourceJar(type: org.gradle.api.tasks.bundling.Jar) {
	description = 'An archive of the source code for Maven Central'
	baseName = artifact
	classifier = 'sources'
	from sourceSets.main.groovy
}

task groovydocJar(type: org.gradle.api.tasks.bundling.Jar, dependsOn: groovydoc) {
	description = 'An archive of the GroovyDocs for Maven Central'
	baseName = artifact
	classifier = 'javadoc'
	from fileTree(groovydoc.destinationDir)
}

task wrapper(type: Wrapper) {
	gradleVersion = '1.0-milestone-7'
}

artifacts { 
	archives groovydocJar, sourceJar
}

if (project.hasProperty('sign')) {
	signing {
		sign configurations.archives
	}
}

install.repositories.mavenInstaller {
	pom.project(pomConfiguration)
	if (project.hasProperty('sign')) {
		beforeDeployment {
			MavenDeployment deployment -> signPom(deployment)
		}
	}
}

// NOTE: Must still rename build/pom-default.xml to pom.xml
// NOTE: Must rename pom-default.xml.asc to gradle-js-plugin-${version}.pom.asc
uploadPublished {
	if (project.hasProperty('sign')) {
		dependsOn << [signArchives]
	}
	repositories.mavenDeployer {
		beforeDeployment { deployment ->
			if (project.hasProperty('sign')) {
				signPom(deployment)
			}
		}
		name = 'mavenCentralReleaseDeployer'
		repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
			authentication(userName: System.properties['mavenCentralUsername'], password: System.properties['mavenCentralPassword'])
			releases(updatePolicy: 'always')
			snapshots(updatePolicy: 'always')
		}
		pom.project(pomConfiguration)

        // Fix the generated pom to set the 'packaging' tag
        pom.withXml { XmlProvider xmlProvider ->
            def xml = xmlProvider.asString()
            def pomXml = new XmlParser().parse(new ByteArrayInputStream(xml.toString().bytes))

            pomXml.version[0] + { packaging('jar') }

            def newXml = new StringWriter()
            def printer = new XmlNodePrinter(new PrintWriter(newXml))
            printer.preserveWhitespace = true
            printer.print(pomXml)
            xml.setLength(0)
            xml.append(newXml.toString())
        }
	}
}

/**
 * Create POM config and return for use by other tasks.
 */
def getPomConfiguration() { 
	return {
		name 'Gradle JS Plugin'
        packaging 'jar'
		description 'A Gradle plugin for working with JS.'
		url 'https://github.com/eriwen/gradle-js-plugin'
		licenses {
			license {
				name 'The Apache Software License, Version 2.0'
				url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
				distribution 'repo'
			}
		}
		developers {
			developer {
				id 'eriwen'
				name 'Eric Wendelin'
				email 'emwendelin@gmail.com'
			}
		}
		scm {
			connection 'scm:https://eriwen@github.com/eriwen/gradle-js-plugin'
			developerConnection 'scm:git@github.com:eriwen/gradle-js-plugin.git'
			url 'https://github.com/eriwen/gradle-js-plugin'
		}
	}
}

